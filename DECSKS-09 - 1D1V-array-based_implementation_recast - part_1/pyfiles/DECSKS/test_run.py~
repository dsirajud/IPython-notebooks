import _mypath     # adds relative path to sys.path for flexible deployment
import DECSKS
import numpy as np
# =========================================================================== #

#rm_plots = int(raw_input('remove ALL plot files after simulation is done (1 = yes, 0 = no)?: '))
#tic = time.clock()

sim_params = DECSKS.lib.read.inputfile('./etc/params.dat')
sim_params['BC'] = 'periodic'
x = DECSKS.lib.domain.Setup(sim_params, var = 'x')
vx = DECSKS.lib.domain.Setup(sim_params, var = 'v', dim = 'x')
t = DECSKS.lib.domain.Setup(sim_params, var = 't')
f = DECSKS.lib.density.setup(sim_params, t, x, vx)    # f = f(x_i, v_j, t^n)

# store total mass for conservation checks
sim_params['m_0'] = np.sum(DECSKS.lib.convect.extract_active_grid(x, vx, f[0,:,:]))

# Current case: uniform background (cold) density of ions,
sim_params['ni'] = DECSKS.lib.density.cold_background(f,x,vx,sim_params)


f_initial = f[0,:,:]


E = DECSKS.lib.fieldsolvers.Gauss(sim_params['ni'], f, x, vx, 0) 
a = -E

# (0) INITIALIZE FINAL DENSITY CONTAINER AND EXTRACT EVOLVED GRID
f_final = np.zeros_like(f_initial)

z = vx
vz = a

f_initial = DECSKS.lib.convect.extract_active_grid(z, vz, f_initial)

# (1) PUSH MOVING CELLS an integer number of cells
z, k = DECSKS.lib.convect.advection_step(f_initial, z, vz)
