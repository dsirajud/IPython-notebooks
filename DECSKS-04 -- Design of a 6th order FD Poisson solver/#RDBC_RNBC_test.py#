import numpy as np
import numpy.linalg as LA
import matplotlib.pyplot as plt

def Poisson_6th_RDBC_RNBC(n, Nx = 24, a = 0., b = 1., RDBC = 0., RNBC = 1.):
    """6th order LTE finite difference Poisson solver for two Neumann conditions
    for a suitably well-posed problem. The conditions are enforced as Cauchy
    data at the left boundary, where the second Neumann condition on the right
    hand side will be satisfied by consequence provided the problem meets the
    Neumann solubility condition on the Poisson equation

    inputs:
    n -- (ndarray, ndim = 1) density vector
    Nx -- (int) number of grid points
    a -- (float) left boundary of x-domain
    b -- (float) right boundary of x-domain
                          
    outputs:
    phi -- (ndarray, ndim = 1) numerical solution to potential
    """

    L = float(b - a)
    dx = L / (Nx - 1)
    
    # augmented density vector N = (0, n), shape = (N+1,)
    
    N = np.zeros(Nx)

    # assemble differencing matrix
   
    D = np.zeros((Nx,Nx))

    # LDBC row, (row 0)
    D[-1,-1] = 1.
    
    # LNBC row, (row 1)
    D[-2,-1] = -97/10. 
    D[-2,-2] = 16.
    D[-2,-3] = -10
    D[-2,-4] = 5.
    D[-2,-5] = -3/2. 
    D[-2,-6] = 1/5.
      
    # Poisson's equation rows
    for i in range(Nx-2):
        D[i,i] = 1
        D[i,i+1] = -2
        D[i,i+2] = 1


    # Assemble FD coefficient matrix on n: B
    B = np.zeros((Nx,Nx))
    for i in range(B.shape[0]):
        if i == 0:
            B[i,i] = 3/40.
            B[i,i+1] = 209/240.
            B[i,i+2] = 1/60.
            B[i,i+3] = 7/120.
            B[i,i+4] = -1/40.
            B[i,i+5] = 1/240.
                      
        if 1 <= i < Nx-3:
            B[i,i-1] = -1/240.
            B[i,i] = 1/10.
            B[i,i+1] = 97/120.
            B[i,i+2] = 1/10.
            B[i,i+3] = -1/240.
            
        elif i == Nx-3:
            B[i,i-3] = 1/240.
            B[i,i-2] = -1/40.
            B[i,i-1] = 7/120.
            B[i,i] = 1/60.  
            B[i,i+1] = 209/240.
            B[i,i+2] = 3/40.
            
        elif i == Nx-2:
            B[i,i+1] = 317 / 240.
            B[i,i] = -133/120.
            B[i,i-1] = 187 / 120.
            B[i,i-2] = -23 / 20.
            B[i,i-3] = 109 / 240.
            B[i,i-4] = -3/40.
            
        # elif i == Nx - 1: all zeros


    phi_BC = np.zeros(Nx)

    phi_BC[-1] = RDBC
    phi_BC[-2] = -6 * dx * RNBC
    b = dx ** 2 * B.dot(n) + phi_BC
    phi = LA.solve(D,b)

    return phi


